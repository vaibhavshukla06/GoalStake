import React, { useEffect } from 'react';\nimport { View, StyleSheet, ViewStyle, Platform } from 'react-native';\nimport { colors } from '@/constants/colors';\n\n// Use conditional import for Reanimated to avoid web issues\nlet Animated;\nif (Platform.OS !== 'web') {\n  Animated = require('react-native-reanimated');\n} else {\n  // Simple fallback for web\n  Animated = {\n    View: View,\n    createAnimatedComponent: (component) => component,\n  };\n}\n\ninterface SkeletonProps {\n  width?: number | string;\n  height?: number | string;\n  borderRadius?: number;\n  style?: ViewStyle;\n}\n\nexport const Skeleton: React.FC<SkeletonProps> = ({\n  width = '100%',\n  height = 20,\n  borderRadius = 4,\n  style\n}) => {\n  // For web, we'll just use a static view\n  if (Platform.OS === 'web') {\n    return (\n      <View\n        style={[\n          styles.skeleton,\n          { width, height, borderRadius, opacity: 0.5 },\n          style\n        ]}\n      />\n    );\n  }\n  \n  // For native platforms, use Reanimated\n  const { useSharedValue, useAnimatedStyle, withRepeat, withTiming, Easing, cancelAnimation } = Animated;\n  \n  const opacity = useSharedValue(0.3);\n  \n  useEffect(() => {\n    opacity.value = withRepeat(\n      withTiming(0.6, { duration: 1000, easing: Easing.ease }),\n      -1,\n      true\n    );\n    \n    return () => {\n      cancelAnimation(opacity);\n    };\n  }, []);\n  \n  const animatedStyle = useAnimatedStyle(() => {\n    return {\n      opacity: opacity.value\n    };\n  });\n  \n  return (\n    <Animated.View\n      style={[\n        styles.skeleton,\n        { width, height, borderRadius },\n        animatedStyle,\n        style\n      ]}\n    />\n  );\n};\n\ninterface SkeletonCardProps {\n  lines?: number;\n  style?: ViewStyle;\n}\n\nexport const SkeletonCard: React.FC<SkeletonCardProps> = ({\n  lines = 3,\n  style\n}) => {\n  return (\n    <View style={[styles.card, style]}>\n      <View style={styles.cardHeader}>\n        <Skeleton width={40} height={40} borderRadius={20} />\n        <View style={styles.cardHeaderText}>\n          <Skeleton width=\"70%\" height={16} />\n          <Skeleton width=\"40%\" height={12} style={{ marginTop: 8 }} />\n        </View>\n      </View>\n      \n      {Array.from({ length: lines }).map((_, index) => (\n        <Skeleton\n          key={index}\n          width={index === lines - 1 ? '70%' : '100%'}\n          height={14}\n          style={{ marginTop: 12 }}\n        />\n      ))}\n    </View>\n  );\n};\n\ninterface SkeletonListProps {\n  count?: number;\n  style?: ViewStyle;\n}\n\nexport const SkeletonList: React.FC<SkeletonListProps> = ({\n  count = 3,\n  style\n}) => {\n  return (\n    <View style={[styles.list, style]}>\n      {Array.from({ length: count }).map((_, index) => (\n        <SkeletonCard key={index} style={{ marginBottom: 16 }} />\n      ))}\n    </View>\n  );\n};\n\n// Challenge list skeleton\nexport const SkeletonChallengeList: React.FC<SkeletonListProps> = ({\n  count = 3,\n  style\n}) => {\n  return (\n    <View style={[styles.list, style]}>\n      {Array.from({ length: count }).map((_, index) => (\n        <View key={index} style={styles.challengeCard}>\n          <View style={styles.challengeHeader}>\n            <Skeleton width={80} height={24} borderRadius={12} />\n            <Skeleton width={60} height={24} borderRadius={4} />\n          </View>\n          <Skeleton width=\"90%\" height={20} style={{ marginTop: 12 }} />\n          <Skeleton width=\"70%\" height={16} style={{ marginTop: 8 }} />\n          <View style={styles.challengeMeta}>\n            <Skeleton width={80} height={12} />\n            <Skeleton width={80} height={12} />\n          </View>\n          <Skeleton width=\"100%\" height={8} style={{ marginTop: 16, marginBottom: 4 }} />\n          <View style={styles.challengeActions}>\n            <Skeleton width=\"45%\" height={36} borderRadius={8} />\n            <Skeleton width=\"45%\" height={36} borderRadius={8} />\n          </View>\n        </View>\n      ))}\n    </View>\n  );\n};\n\n// Profile skeleton\nexport const SkeletonProfile: React.FC<{style?: ViewStyle}> = ({ style }) => {\n  return (\n    <View style={[styles.profile, style]}>\n      <Skeleton width={80} height={80} borderRadius={40} style={styles.avatar} />\n      <Skeleton width={150} height={24} style={{ marginTop: 16 }} />\n      <Skeleton width={100} height={16} style={{ marginTop: 8 }} />\n      \n      <View style={styles.stats}>\n        <View style={styles.statItem}>\n          <Skeleton width={50} height={24} />\n          <Skeleton width={80} height={16} style={{ marginTop: 4 }} />\n        </View>\n        <View style={styles.statItem}>\n          <Skeleton width={50} height={24} />\n          <Skeleton width={80} height={16} style={{ marginTop: 4 }} />\n        </View>\n        <View style={styles.statItem}>\n          <Skeleton width={50} height={24} />\n          <Skeleton width={80} height={16} style={{ marginTop: 4 }} />\n        </View>\n      </View>\n    </View>\n  );\n};\n\n// Main SkeletonLoader component with different types\ninterface SkeletonLoaderProps {\n  type?: 'card' | 'list' | 'challenge-list' | 'profile';\n  count?: number;\n  style?: ViewStyle;\n}\n\nconst SkeletonLoader: React.FC<SkeletonLoaderProps> = ({\n  type = 'card',\n  count = 3,\n  style\n}) => {\n  switch (type) {\n    case 'card':\n      return <SkeletonCard style={style} />;\n    case 'list':\n      return <SkeletonList count={count} style={style} />;\n    case 'challenge-list':\n      return <SkeletonChallengeList count={count} style={style} />;\n    case 'profile':\n      return <SkeletonProfile style={style} />;\n    default:\n      return <SkeletonCard style={style} />;\n  }\n};\n\nconst styles = StyleSheet.create({\n  skeleton: {\n    backgroundColor: colors.border,\n  },\n  card: {\n    backgroundColor: colors.cardBackground || colors.card || '#ffffff',\n    borderRadius: 12,\n    padding: 16,\n    borderWidth: 1,\n    borderColor: colors.border,\n  },\n  cardHeader: {\n    flexDirection: 'row',\n    marginBottom: 16,\n  },\n  cardHeaderText: {\n    flex: 1,\n    marginLeft: 12,\n    justifyContent: 'center',\n  },\n  list: {\n    width: '100%',\n  },\n  challengeCard: {\n    backgroundColor: colors.cardBackground || colors.card || '#ffffff',\n    borderRadius: 12,\n    padding: 16,\n    marginBottom: 16,\n    borderWidth: 1,\n    borderColor: colors.border,\n  },\n  challengeHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 12,\n  },\n  challengeMeta: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 16,\n  },\n  challengeActions: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginTop: 16,\n  },\n  profile: {\n    alignItems: 'center',\n    padding: 16,\n  },\n  avatar: {\n    alignSelf: 'center',\n  },\n  stats: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    width: '100%',\n    marginTop: 24,\n  },\n  statItem: {\n    alignItems: 'center',\n  },\n});\n\nexport default SkeletonLoader;